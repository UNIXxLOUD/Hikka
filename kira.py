import asyncio
import logging

from g4f.client import Client

from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class Kira(loader.Module):
    """–ò–ò –¥–µ–≤—É—à–∫–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç–æ–≤."""

    strings = {
        "name": "Kira",

        "no_args": "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–ù—É–∂–Ω–æ </b><code>{}{} {}</code>",

        "asking_chatgpt": """<emoji document_id=5334675996714999970>üîÑ</emoji> <b>–°–ø—Ä–∞—à–∏–≤–∞—é –ö–∏—Ä—É...</b>

<i><emoji document_id=5370869711888194012>üëæ</emoji> –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ –ö–∏—Ä–∞.</i>""",
        
        "answer_text": """<emoji document_id=5818813162815753343>üë®‚Äçüíª</emoji> <b>–í–æ–ø—Ä–æ—Å:</b> {question}

<emoji document_id=5372981976804366741>ü§ñ</emoji> <b>–û—Ç–≤–µ—Ç:</b> {answer}

<emoji document_id=5424753383741346604>üñ•</emoji> <b>–ú–æ–¥–µ–ª—å</b>: <code>{model}</code>""",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "model",
                "gpt-4o",
                lambda: "–ú–æ–¥–µ–ª—å ChatGPT",
            ),
            loader.ConfigValue(
                "role",
                "user",
                lambda: "–ö—Ç–æ —Ç—ã –¥–ª—è ChatGPT?",
            ),
        )

    async def client_ready(self, client, db):
        self.db = db
        self._client = client

    @loader.command()
    async def kira(self, message):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ö–∏—Ä–µ."""
        # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.from_id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
            return await utils.answer(message, "<emoji document_id=5854929766146118183>‚ùå</emoji> <b>–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.</b>")

        q = utils.get_args_raw(message)
        if not q:
            return await utils.answer(message, self.strings["no_args"].format(self.get_prefix(), "kira", "[–≤–æ–ø—Ä–æ—Å]"))

        await utils.answer(message, self.strings['asking_chatgpt'].format(prefix=self.get_prefix()))

        client = Client()
        response = client.chat.completions.create(
            model=self.config['model'],
            messages=[{"role": self.config['role'], "content": q}],
            stream=False,
        )

        return await utils.answer(message, self.strings['answer_text'].format(question=q, answer=response.choices[0].message.content.strip(), model=self.config['model']))
