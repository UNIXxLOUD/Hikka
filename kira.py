from .. import loader, utils
import requests

@loader.tds
class KiraAssistant(loader.Module):
    """A simple assistant module that responds to commands using Hugging Face Transformers."""
    
    strings = {
        "name": "KiraAssistant",
        "running": "<emoji document_id=5870718740236079262>üåü</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b>",
        "error": "<emoji document_id=üö´</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "voice_recorded": "<emoji document_id=üì•</emoji> <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!</b>",
        "response": "<emoji document_id=üí¨</emoji> <b>–û—Ç–≤–µ—Ç:</b> <code>{response}</code>",
    }

    strings_ru = {
        "running": "<emoji document_id=5870718740236079262>üåü</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b>",
        "error": "<emoji document_id=üö´</emoji> <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "voice_recorded": "<emoji document_id=üì•</emoji> <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!</b>",
        "response": "<emoji document_id=üí¨</emoji> <b>–û—Ç–≤–µ—Ç:</b> <code>{response}</code>",
    }

    async def client_ready(self, client, db):
        self.client = client

    async def kiracmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ö–∏—Ä–∞ <–≤–∞—à –∑–∞–ø—Ä–æ—Å>' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞."""
        await utils.answer(message, self.strings("running"))

        query = message.text.split(' ', 1)
        if len(query) > 1:
            user_query = query[1]
            try:
                response = await self.get_ai_response(user_query)
                await utils.answer(message, self.strings("response").format(response=response))
            except Exception as e:
                await utils.answer(message, self.strings("error").format(error=str(e)))
        else:
            await utils.answer(message, self.strings("error").format(error="–ù–µ–æ–±—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ '–ö–∏—Ä–∞'."))

    async def kirasaycmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ö–∏—Ä–∞ —Å–∫–∞–∂–∏ <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>' –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        await utils.answer(message, self.strings("running"))

        user_message = message.text.split(' ', 2)[-1]  
        await utils.answer(message, self.strings("voice_recorded"))

    async def get_ai_response(self, query):
        headers = {
            "Authorization": "Bearer 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"
        }
        
        payload = {
            "inputs": query,
        }

        response = requests.post('https://api-inference.huggingface.co/models/gpt2', headers=headers, json=payload)
        
        if response.status_code == 200:
            result = response.json()
            return result[0]['generated_text']
        else:
            raise Exception("–û—à–∏–±–∫–∞ API: " + response.text)
            
